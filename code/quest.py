# -*- coding: utf-8 -*-
"""quest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LD160KAArWPB5nlEhdHUiCwOq0LcWgum
"""

import pandas as pd
import requests
import json
import time

"""### Youbike 即時資料"""

url = "https://tcgbusfs.blob.core.windows.net/dotapp/youbike/v2/youbike_immediate.json"
response = requests.get(url)
data = response.json()

if not data:
    raise ValueError("API 沒有回傳資料")

"""sno(站點代號)、sna(場站中文名稱)、total(場站總停車格)、available_rent_bikes(場站目前車輛數量)、sarea(場站區域)、mday(資料更新時間)、latitude(緯度)、longitude(經度)、ar(地點)、sareaen(場站區域英文)、snaen(場站名稱英文)、aren(地址英文)、available_return_bikes(空位數量)、act(全站禁用狀態)、srcUpdateTime(YouBike2.0系統發布資料更新的時間)、updateTime(大數據平台經過處理後將資料存入DB的時間)、infoTime(各場站來源資料更新時間)、infoDate(各場站來源資料更新時間)

### Youbike 站點歷史資料 (from TDX)
"""

# api key

# client_id = '113753213-44488167-4105-4f33'
# client_secret = '5c6f196d-5283-43e0-8f08-2951f0a08879'
client_id = 'sssun-09d597db-5ec8-446e'
client_secret = '8ffe4bd6-dc2e-40e1-8f9e-2c5d62e13ab1'

# Authentication

auth_url = 'https://tdx.transportdata.tw/auth/realms/TDXConnect/protocol/openid-connect/token'
headers = {
    'Content-Type': 'application/x-www-form-urlencoded'
}
data = {
    'grant_type': 'client_credentials',
    'client_id': client_id,
    'client_secret': client_secret
}

response = requests.post(auth_url, headers=headers, data=data)

print(response.json())

access_token = response.json()['access_token']

# Request data

# url = 'https://tdx.transportdata.tw/api/basic/v2/Road/Traffic/CCTV/City/YilanCounty?%24top=30&%24format=JSON'
# url = 'https://tdx.transportdata.tw/api/historical/v2/Historical/Bike/Station/DataVersion/SDate/2025-05-11/EDate/2025-05-11/City/NewTaipei'
# url = 'https://tdx.transportdata.tw/api/historical/v2/Historical/Bike/Availability/Taipei?Dates=2025-05-11&%24format=JSONL'
# url = 'https://tdx.transportdata.tw/api/historical/v1/Weather/Observation/AWS?$format=json&Dates=2025-05-11'
url = 'https://tdx.transportdata.tw/api/basic/v2/Bike/Station/City/Taipei?%24format=JSON'

headers = {
    'Authorization': 'Bearer ' + access_token
    # 'Accept-Encoding': 'br, gzip'
}

response = requests.get(url, headers=headers)

# print(len(response.json()))
# print(response.json())

if response.status_code == 200:
  text = response.content.decode('utf-8-sig')  # 解碼時自動去掉 BOM
  lines = text.strip().split('\n')
  data = [json.loads(line) for line in lines]
  print(f'共 {len(data)} 筆資料')
  print(data[0])  # 顯示第一筆
else:
  print("錯誤：", response.status_code)

# get a month
dta = []
for i in range(5):
  date_str = f'2025-05-{i+23:02d}'
  # url = f'https://tdx.transportdata.tw/api/historical/v2/Historical/Bike/Availability/Taipei?Dates={date_str}&%24format=JSONL' # 腳踏車歷史資料
  url = f'https://tdx.transportdata.tw/api/historical/v1/Weather/Observation/AWS?$format=json&Dates={date_str}'          # 氣象
  headers = {
    'Authorization': 'Bearer ' + access_token
  }
  response = requests.get(url, headers=headers)
  time.sleep(0.5)

  if response.status_code == 200:
    text = response.content.decode('utf-8-sig')  # 解碼時自動去掉 BOM
    lines = text.strip().split('\n')
    data = [json.loads(line) for line in lines]
    print(f'{date_str}共 {len(data)} 筆資料')
    print(data[0])  # 顯示第一筆
    dta.extend(data)
  else:
    print("錯誤：", response.status_code)

# data = dta
# dta[5268142]
len(dta)

"""## 存進sheet"""

import gspread
from google.colab import auth
from google.auth import default

auth.authenticate_user()

creds, _ = default()
gc = gspread.authorize(creds)

# setting

url = "https://docs.google.com/spreadsheets/d/1ndXSJL_uJltpHZYAPl7ZDW5csyEJnVkIcZItSWHwPXM/edit?gid=0#gid=0"
file_name = 'data'
SPREADSHEET_ID = url.split("/d/")[1].split("/")[0]
sheet_name = "YouBike_availability_0424-0524"

# input data
input = pd.DataFrame(data)
# input = input.fillna('')
print(f'\n總共資料筆數：{len(input)}')
print(input.head())

sh = gc.open_by_key(SPREADSHEET_ID)
# choose tab
try:
  worksheet = sh.worksheet(sheet_name)
except gspread.exceptions.WorksheetNotFound:
  print(f"can't find {sheet_name} worksheet，build a new one...")
  worksheet = sh.add_worksheet(title=sheet_name, rows=len(input), cols=len(input.columns))

# clear old data
worksheet.clear()

# write
worksheet.update([input.columns.values.tolist()] + input.values.tolist())

print("Write into Google Sheets successfully！")



"""## 存成csv"""

input = pd.DataFrame(data[0])
print(f'\n總共資料筆數：{len(input)}')
print(input.head())

from google.colab import files
input.to_csv("av_predict.csv", index=False, encoding='utf-8-sig')
files.download('av_predict.csv')

# input.to_csv("Weather_0424-0524.csv", index=False, encoding='utf-8-sig')
# files.download('Weather_0424-0524.csv')

input

import pandas as pd

# 假設 df 是你的原始 DataFrame
df = input

# 展開 dictionary 欄位
df_station_name = df["StationName"].apply(pd.Series).rename(columns={"Zh_tw": "StationName_Zh_tw", "En": "StationName_En"})
df_station_position = df["StationPosition"].apply(pd.Series).rename(columns={
    "PositionLon": "PositionLon",
    "PositionLat": "PositionLat",
    "GeoHash": "GeoHash"
})
df_station_address = df["StationAddress"].apply(pd.Series).rename(columns={"Zh_tw": "StationAddress_Zh_tw", "En": "StationAddress_En"})

# 合併回原本的 DataFrame，並刪除原始的 dictionary 欄位
df_cleaned = pd.concat([
    df.drop(columns=["StationName", "StationPosition", "StationAddress"]),
    df_station_name,
    df_station_position,
    df_station_address
], axis=1)

# 顯示處理好的 DataFrame
import ace_tools as tools; tools.display_dataframe_to_user(name="展開後的 YouBike 站點資料", dataframe=df_cleaned)

df.head()

"""### check data & plot"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

file_path = '/content/drive/MyDrive/Data Final/data.csv.gz'

# 直接讀取並解壓縮
df = pd.read_csv(file_path, compression='gzip')

# 顯示前幾列確認資料
df.head()

import numpy as np

# (1) 全部資料
data_all = df

# (2) 特定區域資料（以距離中心點）
center_lat = 25.017440
center_lon = 121.538232
radius_deg = 0.016  # 大約等於 1.7 km 的緯度與經度半徑

# 計算每個點與中心點的距離，並過濾符合條件的資料
data_area = df[
    np.sqrt((df['latitude'] - center_lat)**2 + (df['longitude'] - center_lon)**2) <= radius_deg
]

# (3) 單一站點資料
data_single = df[df['StationID'] == 500101003]

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# === 載入資料 ===
df['UpdateTime'] = pd.to_datetime(df['UpdateTime'])
df['date'] = pd.to_datetime(df['date'])

# === 敘述統計分析 ===
stats_summary = df[['AvailableRentBikes', 'AvailableReturnBikes']].agg(['mean', 'median', 'std'])
print("===== Descriptive Statistics =====")
print(stats_summary)

# === 每小時趨勢圖 ===
hourly = df.groupby('hour')[['AvailableRentBikes', 'AvailableReturnBikes']].mean().reset_index()
plt.figure(figsize=(8, 4))
sns.lineplot(data=hourly, x='hour', y='AvailableRentBikes', label='Rent')
sns.lineplot(data=hourly, x='hour', y='AvailableReturnBikes', label='Return')
plt.title('Hourly Trend (All Data)')
plt.ylabel('Bike Count')
plt.show()

# === 每日趨勢圖 ===
daily = df.groupby('date')[['AvailableRentBikes', 'AvailableReturnBikes']].mean().reset_index()
plt.figure(figsize=(10, 4))
sns.lineplot(data=daily, x='date', y='AvailableRentBikes', label='Rent')
sns.lineplot(data=daily, x='date', y='AvailableReturnBikes', label='Return')
plt.title('Daily Trend (All Data)')
plt.ylabel('Bike Count')
plt.xticks(rotation=45)
plt.show()

# === 平日 vs 週末 ===
df['is_weekend'] = df['weekday'].isin(['週六', '週日'])
plt.figure(figsize=(6, 4))
sns.boxplot(data=df, x='is_weekend', y='AvailableRentBikes')
plt.title('Rent Bikes: Weekday vs Weekend')
plt.show()

plt.figure(figsize=(6, 4))
sns.boxplot(data=df, x='is_weekend', y='AvailableReturnBikes')
plt.title('Return Bikes: Weekday vs Weekend')
plt.show()

# === ANOVA 檢定 ===
def perform_anova(data, features, target):
    anova_results = {}
    for feature in features:
        if data[feature].nunique() > 1:
            groups = [group[target].dropna().values for _, group in data.groupby(feature)]
            f_val, p_val = stats.f_oneway(*groups)
            anova_results[feature] = {'F': f_val, 'p': p_val}
    return pd.DataFrame(anova_results).T

anova_rent = perform_anova(df, ['hour', 'weekday', 'area', 'Town', 'Temp', 'HUMD'], 'AvailableRentBikes')
anova_return = perform_anova(df, ['hour', 'weekday', 'area', 'Town', 'Temp', 'HUMD'], 'AvailableReturnBikes')

print("\n===== ANOVA: AvailableRentBikes =====")
print(anova_rent)

print("\n===== ANOVA: AvailableReturnBikes =====")
print(anova_return)

import matplotlib.pyplot as plt
import seaborn as sns

# Violin plot: hour vs AvailableRentBikes
plt.figure(figsize=(10, 5))
sns.violinplot(data=df, x='hour', y='AvailableRentBikes', inner='box')
plt.title('Violin Plot: Hour vs AvailableRentBikes')
plt.show()

# Violin plot: hour vs AvailableReturnBikes
plt.figure(figsize=(10, 5))
sns.violinplot(data=df, x='hour', y='AvailableReturnBikes', inner='box')
plt.title('Violin Plot: Hour vs AvailableReturnBikes')
plt.show()

# Faceted violin plot by weekday
g = sns.catplot(data=df, x='hour', y='AvailableRentBikes', kind='violin', col='weekday',
                col_wrap=4, height=4, aspect=1.2, inner='box')
g.fig.subplots_adjust(top=0.9)
g.fig.suptitle('Hourly Rent Bikes Distribution by Weekday')
plt.show()

# Temp vs AvailableRentBikes with hour as hue
plt.figure(figsize=(6, 5))
sns.scatterplot(data=df, x='Temp', y='AvailableRentBikes', hue='hour', palette='coolwarm')
plt.title('Temperature vs AvailableRentBikes (colored by Hour)')
plt.show()

# HUMD vs AvailableReturnBikes with weekday as hue
plt.figure(figsize=(6, 5))
sns.scatterplot(data=df, x='HUMD', y='AvailableReturnBikes', hue='weekday', palette='Set2')
plt.title('Humidity vs AvailableReturnBikes (colored by Weekday)')
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# 取數值欄位並計算相關係數
num_cols = ['AvailableRentBikes', 'AvailableReturnBikes', 'hour', 'weekday_num', 'Temp', 'HUMD']
corr_matrix = df[num_cols].corr(method='pearson')

# 繪製熱力圖（綠色同色系）
plt.figure(figsize=(8, 6))
ax = sns.heatmap(corr_matrix, annot=True, cmap='Greens', fmt=".2f", vmin=-1, vmax=1,
                 cbar_kws={"label": "Correlation"}, xticklabels=True, yticklabels=True)

# 將 x 軸標籤放到上方
ax.xaxis.set_ticks_position('top')
ax.xaxis.set_label_position('top')
plt.xticks(rotation=0)  # 文字橫放

# 標題
plt.title('Correlation Heatmap (Pearson)', y=1.15)

plt.tight_layout()
plt.show()

# 印出 AvailableRentBikes 的 ANOVA 結果，格式化顯示
print("===== ANOVA: AvailableRentBikes =====")
for idx, row in anova_rent.iterrows():
    print(f"{idx:<10}  F = {row['F']:.3f}   p = {row['p']:.5f}")

# 印出 AvailableReturnBikes 的 ANOVA 結果，格式化顯示
print("\n===== ANOVA: AvailableReturnBikes =====")
for idx, row in anova_return.iterrows():
    print(f"{idx:<10}  F = {row['F']:.3f}   p = {row['p']:.5f}")

import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# # 假設 daily 是你已經 groupby 出來的每日平均資料
# # daily = df.groupby('date')[['AvailableRentBikes', 'AvailableReturnBikes']].mean().reset_index()
# daily = data_single.groupby('date')[['AvailableRentBikes', 'AvailableReturnBikes']].mean().reset_index()

# plt.figure(figsize=(8, 6))

# # 使用指定的綠色色碼與粗線寬
# plt.plot(daily['date'], daily['AvailableRentBikes'], label='Rent', color='#006400', linewidth=2.5)   # 深綠
# plt.plot(daily['date'], daily['AvailableReturnBikes'], label='Return', color='#90EE90', linewidth=2.5)  # 淺綠

# # x 軸只顯示月日
# date_format = mdates.DateFormatter('%m-%d')
# plt.gca().xaxis.set_major_formatter(date_format)
# plt.xticks(rotation=0)

# plt.title('Daily Trend (All Data)')
# plt.xlabel('Date')
# plt.ylabel('Bike Count')
# plt.legend()
# plt.tight_layout()
# plt.show()
#####################

hourly = data_single.groupby('hour')[['AvailableRentBikes', 'AvailableReturnBikes']].mean().reset_index()
plt.figure(figsize=(8, 6))

# 使用指定的綠色色碼與粗線寬
plt.plot(hourly['hour'], hourly['AvailableRentBikes'], label='Rent', color='#006400', linewidth=2.5)   # 深綠
plt.plot(hourly['hour'], hourly['AvailableReturnBikes'], label='Return', color='#90EE90', linewidth=2.5)  # 淺綠

# x 軸只顯示月日
# date_format = mdates.DateFormatter('%m-%d')
# plt.gca().xaxis.set_major_formatter(date_format)
# plt.xticks(rotation=0)

plt.title('Hourly Trend (NTUEEES East Side Door)')
plt.xlabel('Hour')
plt.ylabel('Bike Count')
plt.legend()
plt.tight_layout()
plt.show()

# 定義中文星期對應的數值對照表
weekday_mapping = {
    '週一': 1,
    '週二': 2,
    '週三': 3,
    '週四': 4,
    '週五': 5,
    '週六': 6,
    '週日': 7
}

# 新增一欄 weekday_num
df['weekday_num'] = df['weekday'].map(weekday_mapping)

import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.colors import TwoSlopeNorm

# 計算相關矩陣
num_cols = ['AvailableRentBikes', 'AvailableReturnBikes', 'hour', 'weekday_num', 'Temp', 'HUMD']
corr_matrix = df[num_cols].corr(method='pearson')

# 設定 seaborn 字體放大一點
# sns.set(font_scale=1.2)

# Rename Rent/Return
corr_matrix = corr_matrix.rename(
    index={'AvailableRentBikes': 'Rent', 'AvailableReturnBikes': 'Return', 'weekday_num': 'weekday'},
    columns={'AvailableRentBikes': 'Rent', 'AvailableReturnBikes': 'Return', 'weekday_num': 'weekday'}
)

# 自訂比較白且對比強的綠色色階（讓0更亮）
green_palette = sns.diverging_palette(140, 90, s=70, l=90, as_cmap=True)

# 建立 heatmap
plt.figure(figsize=(8, 6))
ax = sns.heatmap(
    corr_matrix,
    annot=True,
    fmt=".2f",
    cmap=green_palette,
    center=0,  # 將 0 當作色階中心
    vmin=-1,
    vmax=1,
    cbar_kws={"label": "Correlation"},
    xticklabels=True,
    yticklabels=True,
    annot_kws={"size": 10}  # 數字字體變大
)

# 將橫軸文字移到上方，且保持橫排
ax.xaxis.set_ticks_position('top')
ax.xaxis.set_label_position('top')
plt.xticks(rotation=0)

# 標題與版面微調
plt.title('Correlation Heatmap (Pearson)', y=1.05)
plt.tight_layout(pad=1.5)
plt.show()

import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# 白色背景（預設）
plt.style.use('default')

fig, ax1 = plt.subplots(figsize=(14, 8))

# ===== 左側 Y 軸：可借/可還 =====
lns1 = ax1.plot(daily['date'], daily['AvailableRentBikes'], label='Rent Bikes',
                color='#006400', linewidth=2.5)
lns2 = ax1.plot(daily['date'], daily['AvailableReturnBikes'], label='Return Bikes',
                color='#66CDAA', linewidth=2.5)
ax1.set_ylabel('Bike Count')
ax1.set_xlabel('Date')
ax1.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d'))

# ===== 右側 Y 軸 1：溫度（深藍）=====
ax2 = ax1.twinx()
lns3 = ax2.plot(daily['date'], daily['Temp'], label='Temperature (°C)',
                color='#4169E1', linewidth=2, linestyle='--', alpha=0.9)
ax2.set_ylabel('Temperature (°C)', color='#4169E1')
ax2.tick_params(axis='y', labelcolor='#4169E1')

# ===== 右側 Y 軸 2：濕度（淺藍）=====
ax3 = ax1.twinx()
ax3.spines['right'].set_position(('outward', 60))
lns4 = ax3.plot(daily['date'], daily['HUMD'], label='Humidity',
                color='#B0E0E6', linewidth=2, linestyle='--', alpha=0.9)
ax3.set_ylabel('Humidity', color='#B0E0E6')
ax3.tick_params(axis='y', labelcolor='#B0E0E6')

# ===== 圖例整合 =====
lns = lns1 + lns2 + lns3 + lns4
labels = [l.get_label() for l in lns]
ax1.legend(lns, labels, loc='lower center', bbox_to_anchor=(0.5, -0.15), ncol=2, fontsize=10)

plt.title('Daily Trend: Rent / Return / Temperature / Humidity')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

